import json
import os
import asyncio
from aiogram import Bot, Dispatcher, types, executor
import requests
import feedparser

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
FOOTBALL_API_KEY = os.getenv('FOOTBALL_API_KEY')
NEWS_FEED = 'https://e00-marca.uecdn.es/rss/futbol/real-madrid.xml'
SUBSCRIBERS_FILE = 'subscribers.json'

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

def load_subscribers():
    try:
        with open(SUBSCRIBERS_FILE, 'r') as f:
            return set(json.load(f))
    except Exception:
        return set()

def save_subscribers(subs):
    with open(SUBSCRIBERS_FILE, 'w') as f:
        json.dump(list(subs), f)

def translate(text, lang_to="uk"):
    try:
        url = "https://translate.googleapis.com/translate_a/single"
        params = {
            'client': 'gtx',
            'sl': 'auto',
            'tl': lang_to,
            'dt': 't',
            'q': text,
        }
        response = requests.get(url, params=params)
        return response.json()[0][0][0]
    except:
        return text

def get_news(count=3):
    feed = feedparser.parse(NEWS_FEED)
    if not feed.entries:
        # Debug: –≤–∏–≤—ñ–¥, —á–∏ —Ä–µ–∞–ª—å–Ω–æ —î entries
        print("DEBUG: RSS feed.entries:", feed.entries)
        return "–ù–µ–º–∞—î –Ω–æ–≤–∏–Ω."
    news_list = []
    for entry in feed.entries[:count]:
        title = translate(entry.title)
        link = entry.link
        news_list.append(f"{title}\n{link}")
    return "\n\n".join(news_list) if news_list else "–ù–µ–º–∞—î –Ω–æ–≤–∏–Ω."


def get_next_match():
    url = "https://v3.football.api-sports.io/fixtures"
    headers = {
        "x-apisports-key": FOOTBALL_API_KEY
    }
    params = {
        "team": 541, # Real Madrid ID
        "next": 1
    }
    try:
        r = requests.get(url, headers=headers, params=params)
        data = r.json()
        f = data['response'][0]
        teams = f['teams']
        home = teams['home']['name']
        away = teams['away']['name']
        date = f['fixture']['date'][:16].replace('T', ' ')
        league = f['league']['name']
        return f"–ù–∞—Å—Ç—É–ø–Ω–∏–π –º–∞—Ç—á: {home} vs {away}\n–õ—ñ–≥–∞: {league}\n–î–∞—Ç–∞: {date}"
    except Exception as e:
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º–∞—Ç—á."

def get_laliga_table():
    url = "https://v3.football.api-sports.io/standings"
    headers = {
        "x-apisports-key": FOOTBALL_API_KEY
    }
    params = {
        "league": 140,  # La Liga
        "season": 2023
    }
    try:
        r = requests.get(url, headers=headers, params=params)
        table = r.json()['response'][0]['league']['standings'][0]
        result = "*–¢–∞–±–ª–∏—Ü—è –õ–∞ –õ—ñ–≥–∏:*\n```\n–ú—ñ—Å—Ü–µ  –ö–æ–º–∞–Ω–¥–∞              –û—á–∫–∏\n"
        for team in table:
            place = str(team['rank']).rjust(2)
            name = team['team']['name'][:16].ljust(16)
            points = str(team['points']).rjust(3)
            result += f"{place}. {name} {points}\n"
        result += "```"
        return result
    except Exception:
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –õ–∞ –õ—ñ–≥–∏."

async def news_autosend():
    while True:
        await asyncio.sleep(3 * 60 * 60) # –∫–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏
        subs = load_subscribers()
        if subs:
            news = get_news(3)
            for chat_id in subs:
                try:
                    await bot.send_message(chat_id, f"üì∞ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω Real Madrid:\n\n{news}")
                except Exception:
                    pass

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    text = ("–í—ñ—Ç–∞—é! –¶–µ Real Madrid UA –±–æ—Ç üá™üá∏‚öΩÔ∏è\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/news ‚Äî —Å–≤—ñ–∂—ñ –Ω–æ–≤–∏–Ω–∏\n"
            "/nextmatch ‚Äî –Ω–∞–π–±–ª–∏–∂—á–∏–π –º–∞—Ç—á\n"
            "/table ‚Äî —Ç–∞–±–ª–∏—Ü—è –õ–∞ –õ—ñ–≥–∏\n"
            "/subscribe ‚Äî –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞–≤—Ç–æ–Ω–æ–≤–∏–Ω–∏\n"
            "/unsubscribe ‚Äî –≤—ñ–¥–ø–∏—Å–∫–∞\n\n"
            "¬°Hala Madrid!")
    await message.reply(text)

@dp.message_handler(commands=['news'])
async def news(message: types.Message):
    await message.reply(get_news(3))

@dp.message_handler(commands=['nextmatch'])
async def nextmatch(message: types.Message):
    await message.reply(get_next_match())

@dp.message_handler(commands=['table'])
async def table(message: types.Message):
    await message.reply(get_laliga_table(), parse_mode='Markdown')

@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    subs = load_subscribers()
    subs.add(message.chat.id)
    save_subscribers(subs)
    await message.reply("–¢–µ–ø–µ—Ä —Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –∞–≤—Ç–æ–Ω–æ–≤–∏–Ω–∏ –ø—Ä–æ –†–µ–∞–ª! üì∞")

@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
    subs = load_subscribers()
    subs.discard(message.chat.id)
    save_subscribers(subs)
    await message.reply("–í—ñ–¥–ø–∏—Å–∫–∞ –≤—ñ–¥ –∞–≤—Ç–æ–Ω–æ–≤–∏–Ω –≤–∏–∫–æ–Ω–∞–Ω–∞.")

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(news_autosend())
    executor.start_polling(dp, skip_updates=True)
